/*
 * Copyright (c) 2014 LabKey Corporation
 *
 * Licensed under the Apache License, Version 2.0: http://www.apache.org/licenses/LICENSE-2.0
 */
Ext.define('Connector.model.Filter', {
    extend: 'LABKEY.app.model.Filter',

    statics: {
        sqlToMdx : function(config) {
            // translate a plot selection (SQL Filters) to an MDX subject query.
            // The config object should have the following attributes: schemaName, queryName, measures, sqlFilters,
            // column, success, failure.
            // The schemaName and queryName are of the temporary query generated by the getData api.
            // The measures object is an array, the first measure is always the x axis, the second is the y axis.
            // The sqlFilters object is an array with length 4. The first two objects are the x measure filters, the
            // second two are the y measure filters.
            // subjectColumn is the column name of the subject column.
            var validFilters = [];
            for (var i = 0; i < config.sqlFilters.length; i++) {
                if (config.sqlFilters[i] !== null) {
                    validFilters.push(config.sqlFilters[i]);
                }
            }

            LABKEY.Query.selectDistinctRows({
                schemaName: config.schemaName,
                queryName: config.queryName,
                filterArray: validFilters,
                column: config.subjectColumn,
                success: function(resp) {
                    var mdxFilterConfig = {
                        isGrid: true, // TODO: rename to isSQL
                        isPlot: true,
                        isGroup: false,
                        hierarchy: "Subject",
                        gridFilter: config.sqlFilters, // TODO: rename to sqlFilters
                        plotMeasures: config.measures,
                        operator: LABKEY.app.model.Filter.Operators.UNION,
                        members: []
                    };

                    for (var i = 0; i < resp.values.length; i++) {
                        mdxFilterConfig.members.push({
                            uniqueName: Connector.model.Filter.getSubjectUniqueName(resp.values[i])
                        });
                    }
                    config.success.call(config.scope ? config.scope : this, mdxFilterConfig);
                },
                failure: function(resp) {
                    if (config.failure) {
                        config.failure.call(config.scope ? config.scope : this, resp);
                    } else {
                        console.error("Failure getting distinct subjects.");
                    }
                }
            });
        },

        mdxToSql : function(filter) {
            // Translate a filter object to a set of SQL Filters for a plot selection.
        },

        loaded: false,
        subjectMap: {},
        getSubjectUniqueName : function(subjectID) {
            return '[Subject].[' + Connector.model.Filter.getContainer(subjectID) + '].[' + subjectID + ']';
        },
        getContainer : function(subjectID) {
            return Connector.model.Filter.subjectMap[subjectID];
        },
        loadSubjectContainer : function(mdx) {

            if (!Connector.model.Filter.loaded) {
                // load from mdx
                var level = mdx.getDimension('Subject').getHierarchies()[0].levelMap['Subject'];
                var members = level.members;

                Ext.each(members, function(member) {
                    if (Connector.model.Filter.subjectMap[member.name]) {
                        console.error('Unable to process the same subject identifier in multiple studies.');
                    }
                    else {
                        var uniqueName = member.uniqueName.split('].');
                        var containerID = uniqueName[1].replace('[', '');
                        Connector.model.Filter.subjectMap[member.name] = containerID;
                    }
                });

                Connector.model.Filter.loaded = true;
            }
        }
    }
});
